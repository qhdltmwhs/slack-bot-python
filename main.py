import os
import csv
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
from datetime import datetime
from slack_sdk import WebClient

load_dotenv()

# Install the Slack app and get xoxb- token in advance
app = App(token=os.environ["SLACK_BOT_TOKEN"])


# Add middleware / listeners here

# This will match any message that contains üëã
# @app.message("„Öé„Öá")
# def say_hello(message, say):
#     user = message["user"]
#     # print(user)
#     say(f"Hi there, <@{user}>!")


# @app.command - body json result e.g. : Ïã§Ï†ú ÏΩîÎìúÏôÄ Î¨¥Í¥Ä
{
    "token": "lTJNImiDDZe6kNQuqABlYDAe",
    "team_id": "T08TDQNJDUJ",
    "team_domain": "qhdltmwhs",
    "channel_id": "C08TJM1RG2E",
    "channel_name": "test",
    "user_id": "U08TDQNJE10",
    "user_name": "qhdltmwhs",
    "command": "/Ï†úÏ∂ú",
    "text": "",
    "api_app_id": "A092UFX0E4A",
    "is_enterprise_install": "false",
    "response_url": "https://hooks.slack.com/commands/T08TDQNJDUJ/9085180773399/LVXK3rKtTO9FF3VBhb0yR0wv",
    "trigger_id": "9085180778055.8931838625970.032aefbbce14bbf4dcb21f7b0ae4f540",
}


# @app.view - body json result e.g. : Ïã§Ï†ú Ïã§Ìñâ ÏΩîÎìúÏôÄ Î¨¥Í¥Ä
{
    "type": "view_submission",
    "team": {"id": "T08TDQNJDUJ", "domain": "qhdltmwhs"},
    "user": {
        "id": "U08TDQNJE10",
        "username": "qhdltmwhs",
        "name": "qhdltmwhs",
        "team_id": "T08TDQNJDUJ",
    },
    "api_app_id": "A092UFX0E4A",
    "token": "lTJNImiDDZe6kNQuqABlYDAe",
    "trigger_id": "9085508157239.8931838625970.469d220d3cafd563e5928b0c1d086517",
    "view": {
        "id": "V092S1M0RSA",
        "team_id": "T08TDQNJDUJ",
        "type": "modal",
        "blocks": [
            {
                "type": "input",
                "block_id": "title_block_id",
                "label": {"type": "plain_text", "text": "Ï†úÎ™©", "emoji": True},
                "optional": False,
                "dispatch_action": False,
                "element": {
                    "type": "plain_text_input",
                    "action_id": "input_action_id",
                    "placeholder": {
                        "type": "plain_text",
                        "text": "Îâ¥ÏßÑÏä§",
                        "emoji": True,
                    },
                    "multiline": False,
                    "dispatch_action_config": {
                        "trigger_actions_on": ["on_enter_pressed"]
                    },
                },
            },
            {
                "type": "input",
                "block_id": "contents_block_id",
                "label": {"type": "plain_text", "text": "Ïª®ÌÖêÏ∏†", "emoji": True},
                "optional": False,
                "dispatch_action": False,
                "element": {
                    "type": "plain_text_input",
                    "action_id": "input_action_id",
                    "placeholder": {
                        "type": "plain_text",
                        "text": "Í∞ïÌï¥Î¶∞",
                        "emoji": True,
                    },
                    "multiline": True,
                    "dispatch_action_config": {
                        "trigger_actions_on": ["on_enter_pressed"]
                    },
                },
            },
            {
                "type": "input",
                "block_id": "comment_block_id",
                "label": {"type": "plain_text", "text": "ÏùòÍ≤¨", "emoji": True},
                "optional": True,
                "dispatch_action": False,
                "element": {
                    "type": "plain_text_input",
                    "action_id": "input_action_id",
                    "placeholder": {
                        "type": "plain_text",
                        "text": "ÏµúÏï† Í±∏Í∑∏Î£π Î©§Î≤Ñ",
                        "emoji": True,
                    },
                    "multiline": True,
                    "dispatch_action_config": {
                        "trigger_actions_on": ["on_enter_pressed"]
                    },
                },
            },
        ],
        "private_metadata": "C08TJM1RG2E",
        "callback_id": "submit_view",
        "state": {
            "values": {
                "title_block_id": {
                    "input_action_id": {"type": "plain_text_input", "value": "Îâ¥ÏßÑÏä§"}
                },
                "contents_block_id": {
                    "input_action_id": {"type": "plain_text_input", "value": "Í∞ïÌï¥Î¶∞"}
                },
                "comment_block_id": {
                    "input_action_id": {
                        "type": "plain_text_input",
                        "value": "Í±∏Í∑∏Î£π Î©§Î≤Ñ",
                    }
                },
            }
        },
        "hash": "1750823284.P0IHmfHd",
        "title": {"type": "plain_text", "text": "Î™®Îã¨ Ìèº ÌÖåÏä§Ìä∏", "emoji": True},
        "clear_on_close": False,
        "notify_on_close": False,
        "close": {"type": "plain_text", "text": "Ï∑®ÏÜå", "emoji": True},
        "submit": {"type": "plain_text", "text": "Ï†úÏ∂ú", "emoji": True},
        "previous_view_id": None,
        "root_view_id": "V092S1M0RSA",
        "app_id": "A092UFX0E4A",
        "external_id": "",
        "app_installed_team_id": "T08TDQNJDUJ",
        "bot_id": "B092MNXLW1H",
    },
    "response_urls": [],
    "is_enterprise_install": False,
    "enterprise": None,
}

# @app.view - client.users_info(user=body["user"]["id"]) json result e.g. : Ïã§Ï†ú Ïã§Ìñâ ÏΩîÎìúÏôÄ Î¨¥Í¥Ä
{
    "ok": True,
    "user": {
        "id": "U08TDQNJE10",
        "name": "qhdltmwhs",
        "is_bot": False,
        "updated": 1748325557,
        "is_app_user": False,
        "team_id": "T08TDQNJDUJ",
        "deleted": False,
        "color": "902d59",
        "is_email_confirmed": True,
        "real_name": "Î™®ÎÑ§",
        "tz": "Asia/Seoul",
        "tz_label": "Korea Standard Time",
        "tz_offset": 32400,
        "is_admin": True,
        "is_owner": True,
        "is_primary_owner": True,
        "is_restricted": False,
        "is_ultra_restricted": False,
        "who_can_share_contact_card": "EVERYONE",
        "profile": {
            "real_name": "Î™®ÎÑ§",
            "display_name": "Î™®ÎÑ§",
            "avatar_hash": "13d383bfe86d",
            "real_name_normalized": "Î™®ÎÑ§",
            "display_name_normalized": "Î™®ÎÑ§",
            "image_24": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_24.jpg",
            "image_32": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_32.jpg",
            "image_48": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_48.jpg",
            "image_72": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_72.jpg",
            "image_192": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_192.jpg",
            "image_512": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_512.jpg",
            "image_1024": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_1024.jpg",
            "image_original": "https://avatars.slack-edge.com/2025-05-21/8927751326613_13d383bfe86d3a6eeb29_original.jpg",
            "is_custom_image": True,
            "first_name": "Î™®ÎÑ§",
            "last_name": "",
            "team": "T08TDQNJDUJ",
            "title": "",
            "phone": "",
            "skype": "",
            "status_text": "",
            "status_text_canonical": "",
            "status_emoji": "",
            "status_emoji_display_info": [],
            "status_expiration": 0,
        },
    },
}


# @app.action("fetch_all_submission") - body json result e.g. : Ïã§Ï†ú Ïã§Ìñâ ÏΩîÎìúÏôÄ Î¨¥Í¥Ä
{
    "type": "block_actions",
    "user": {
        "id": "U08TDQNJE10",
        "username": "qhdltmwhs",
        "name": "qhdltmwhs",
        "team_id": "T08TDQNJDUJ",
    },
    "api_app_id": "A092UFX0E4A",
    "token": "lTJNImiDDZe6kNQuqABlYDAe",
    "container": {
        "type": "message",
        "message_ts": "1750855711.001000",
        "channel_id": "C08TJM1RG2E",
        "is_ephemeral": True,
    },
    "trigger_id": "9095272100611.8931838625970.9fc649307ba6dd73fdd98443b1e7c8c8",
    "team": {"id": "T08TDQNJDUJ", "domain": "qhdltmwhs"},
    "enterprise": None,
    "is_enterprise_install": False,
    "channel": {"id": "C08TJM1RG2E", "name": "test"},
    "state": {"values": {}},
    "response_url": "https://hooks.slack.com/actions/T08TDQNJDUJ/9095272082035/6TOsbTHTPGnq6ZqYzJDhtVzt",
    "actions": [
        {
            "action_id": "fetch_all_submission",
            "block_id": "4N7BG",
            "text": {"type": "plain_text", "text": "Ï†ÑÏ≤¥ Ï†úÏ∂úÎÇ¥Ïó≠ Ï°∞Ìöå", "emoji": True},
            "value": "admin_value_1",
            "type": "button",
            "action_ts": "1750855713.631129",
        }
    ],
}


@app.command("/Ï†úÏ∂ú")
def handle_submit_command(ack, body, client):
    ack()
    # Call views_open with the built-in client
    client.views_open(
        # Pass a valid trigger_id within 3 seconds of receiving it
        trigger_id=body["trigger_id"],
        # View payload
        view={
            "type": "modal",
            "callback_id": "submit_view",
            # private_metadata Í∞í ÌôúÏö© = app.view Ïùò Î∞îÎîî Í≤∞Í≥ºÏóê Ï±ÑÎÑê Ï†ïÎ≥¥ Í∞ôÏùÄÍ≤å ÏóÜÏñ¥ÏÑú Ïó¨Í∏∞ÏÑú ÎØ∏Î¶¨ ÎÑ£Ïñ¥ÏÑú Ï†ÑÎã¨ Í∞ÄÎä• *Ï§ëÏöî*!
            "private_metadata": body["channel_id"],
            "title": {"type": "plain_text", "text": "Î™®Îã¨ Ìèº ÌÖåÏä§Ìä∏"},
            "close": {"type": "plain_text", "text": "Ï∑®ÏÜå"},
            "submit": {"type": "plain_text", "text": "Ï†úÏ∂ú"},
            "blocks": [
                # {
                #     "type": "section",
                #     "text": {
                #         "type": "mrkdwn",
                #         "text": "Welcome to a modal with _blocks_",
                #     },
                #     "accessory": {
                #         "type": "button",
                #         "text": {"type": "plain_text", "text": "Click me!"},
                #         "action_id": "button_abc",
                #     },
                # },
                {
                    "type": "input",
                    "block_id": "title_block_id",
                    "label": {
                        "type": "plain_text",
                        "text": "Ï†úÎ™©",
                    },
                    "element": {
                        "type": "plain_text_input",
                        "action_id": "input_action_id",
                        "multiline": False,
                        "placeholder": {"type": "plain_text", "text": "Îâ¥ÏßÑÏä§"},
                    },
                },
                {
                    "type": "input",
                    "block_id": "contents_block_id",
                    "label": {
                        "type": "plain_text",
                        "text": "Ïª®ÌÖêÏ∏†",
                    },
                    "element": {
                        "type": "plain_text_input",
                        "action_id": "input_action_id",
                        "multiline": True,
                        "placeholder": {"type": "plain_text", "text": "Í∞ïÌï¥Î¶∞"},
                    },
                },
                {
                    "type": "input",
                    "block_id": "comment_block_id",
                    "optional": True,  # ÌïÑÏàòÍ∞Ä ÏïÑÎãò Ïó¨Î∂Ä
                    "label": {
                        "type": "plain_text",
                        "text": "ÏùòÍ≤¨",
                    },
                    "element": {
                        "type": "plain_text_input",
                        "action_id": "input_action_id",
                        "multiline": True,
                        "placeholder": {
                            "type": "plain_text",
                            "text": "ÏµúÏï† Í±∏Í∑∏Î£π Î©§Î≤Ñ",
                        },
                    },
                },
            ],
        },
    )


# @app.command("/Ï†úÏ∂ú") "callback_id": "submit_view"Ïùò Í∞íÍ≥º app.view("submit_view") Ïù∏Ïûê Í∞í ÏùºÏπò (ÏÑ§Ï†ï Í∞ÄÎä•)
@app.view("submit_view")
def handle_view_submission_events(ack, body, client):

    # Ï†úÏ∂ú Í∞ÄÎä•Ìïú Ï±ÑÎÑêÏù∏ÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    channel_id = body["view"]["private_metadata"]
    if channel_id != "C08TJM1RG2E":
        ack(
            response_action="errors",
            # "contents_block_id" = Î™®Îã¨ÌèºÏóêÏÑú ÏßÄÏ†ïÌïú ÏûÖÎ†• Ï∞ΩÏóê Ìï¥Îãπ Î©îÏãúÏßÄ ÎùÑÏö∞Í∏∞
            errors={"contents_block_id": "#test Ï±ÑÎÑêÏóêÏÑúÎßå Ï†úÏ∂úÌï† Ïàò ÏûàÏäµÎãàÎã§."},
        )
        return None

    # Ï†úÏ∂ú Í∞ÄÎä•Ìïú Í∏ÄÏûêÏàò Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    contents = body["view"]["state"]["values"]["contents_block_id"]["input_action_id"][
        "value"
    ]
    if len(contents) < 3:
        ack(
            response_action="errors",
            # "contents_block_id" = Î™®Îã¨ÌèºÏóêÏÑú ÏßÄÏ†ïÌïú ÏûÖÎ†• Ï∞ΩÏóê Ìï¥Îãπ Î©îÏãúÏßÄ ÎùÑÏö∞Í∏∞
            errors={"contents_block_id": "Ïª®ÌÖêÏ∏†Îäî ÏÑ∏ Í∏ÄÏûê Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."},
        )
        return None
    # SlackÏùò ÏÉÅÌò∏ÏûëÏö©(Interactivity) ÏöîÏ≤≠, ÌäπÌûà Î™®Îã¨(Modal)Ïù¥ÎÇò Îã®Ï∂ïÌÇ§(Shortcuts),
    # ÎåÄÌôîÌòï Íµ¨ÏÑ± ÏöîÏÜå(Interactive Components)ÏôÄ Í∞ôÏù¥ ÏÇ¨Ïö©Ïûê Ïï°ÏÖòÏóê ÎåÄÌïú Ï¶âÍ∞ÅÏ†ÅÏù∏ ÏùëÎãµÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞Ïóê ÏÇ¨Ïö©Îê©ÎãàÎã§.
    ack()

    # Ï†ÄÏû•Ìï† Îç∞Ïù¥ÌÑ∞
    # Î©§Î≤Ñ Ï†ïÎ≥¥
    user_id = body["user"]["id"]
    user_info = client.users_info(user=user_id)
    user_name = user_info["user"]["real_name"]
    # Ï†úÎ™©
    title = body["view"]["state"]["values"]["title_block_id"]["input_action_id"][
        "value"
    ]
    # Ïª®ÌÖêÏ∏†
    contents = body["view"]["state"]["values"]["contents_block_id"]["input_action_id"][
        "value"
    ]
    # ÏùòÍ≤¨
    comment = body["view"]["state"]["values"]["comment_block_id"]["input_action_id"][
        "value"
    ]
    # ÏÉùÏÑ±ÏùºÏãú
    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # data ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÎã§Î©¥ ÏÉùÏÑ±
    if not os.path.exists("data"):
        os.makedirs("data")

    # Ï†úÏ∂ú Ï†ïÎ≥¥Î•º CSV ÌååÏùºÏóê Ï†ÄÏû•
    with open("data/db.csv", "a", newline="") as csvfile:
        writer = csv.writer(csvfile)

        # ÌååÏùº ÏÇ¨Ïù¥Ï¶àÍ∞Ä 0 Ïù¥ÌïòÎ©¥ Ìó§Îçî Ìñâ Ï∂îÍ∞Ä
        if not os.path.getsize("data/db.csv") > 0:
            writer.writerow(
                ["user_id", "user_name", "title", "contents", "comment", "created_at"]
            )

        writer.writerow([user_id, user_name, title, contents, comment, created_at])

    # Ïä¨Îûô Ï±ÑÎÑêÏóê ÏôÑÎ£å ÏïàÎÇ¥ Î©îÏãúÏßÄ Î≥¥ÎÇ¥Í∏∞
    # <@{user_id}> Ïä¨ÎûôÏóêÏÑú Î©òÏÖò Ìö®Í≥º
    text = f">>> *<@{user_id}>ÎãòÏù¥ `{title}`Ïùò *\n\n '{contents}'Ïóê ÎåÄÌï¥ \n"
    if comment:
        text += f"\n {comment} ÏùòÍ≤¨ Í≥µÏú† \n"
    client.chat_postMessage(channel=channel_id, text=text)


@app.command("/Ï°∞Ìöå")
def handle_submission_history_command(ack, body, client: WebClient):
    ack()

    # Î©§Î≤ÑÏùò DM Ï±ÑÎÑê ID Í∞ÄÏ†∏Ïò§Í∏∞
    user_id = body["user_id"]
    response = client.conversations_open(users=user_id)
    dm_channel_id = response["channel"]["id"]

    # ÎßåÏïΩÏóê Ï†úÏ∂úÎÇ¥Ïó≠ ÌååÏùºÏù¥ ÏóÜÎã§Î©¥ Ï†úÏ∂úÎÇ¥Ïó≠Ïù¥ ÏóÜÎã§Í≥† Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°ÌïòÍ≥† Ï¢ÖÎ£å
    if not os.path.exists("data/db.csv"):
        client.chat_postMessage(
            channel=dm_channel_id, text="Ï†ÑÏ≤¥ Î©§Î≤ÑÏùò Ï†úÏ∂úÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§."
        )
        return None

    # Î©§Î≤ÑÏùò Ï†úÏ∂úÎÇ¥Ïó≠Îßå ÌïÑÌÑ∞ÎßÅ
    submission_list = []
    with open("data/db.csv") as csvfile:
        # csv.DictReaderÍ∞Ä CSVÏùò Ï≤´ÌñâÏùÑ Ìó§ÎçîÏùò ÌÇ§Î°ú ÏÇ¨Ïö©ÌïòÏó¨ Í∞Å ÌñâÏùÑ ÎîïÏÖîÎÑàÎ¶¨Î°ú ÎßåÎì§Ïñ¥Ï§ÄÎã§Îäî Ï†ê Ï∞∏Í≥†!
        reader = csv.DictReader(csvfile)
        fieldnames = reader.fieldnames
        for row in reader:
            if row["user_id"] == user_id:
                submission_list.append(row)

    # print(submission_list)

    # ÎßåÏïΩÏóê Ï†úÏ∂úÎÇ¥Ïó≠Ïù¥ ÏóÜÎã§Î©¥ Ï†úÏ∂úÎÇ¥Ïó≠Ïù¥ ÏóÜÎã§Í≥†  Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°ÌïòÍ≥† Ï¢ÖÎ£å
    if not submission_list:
        client.chat_postMessage(
            channel=dm_channel_id, text="Ï°∞Ìöå Î©§Î≤ÑÏùò Ï†úÏ∂úÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§."
        )
        return None

    # ÏÇ¨Ïö©ÏûêÏùò Ï†úÏ∂úÎÇ¥Ïó≠ÏùÑ CSV ÌååÏùºÎ°ú ÏûÑÏãú Ï†ÄÏû• ÌõÑ Ï†ÑÏÜ°
    temp_dir = "data/temp"
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    temp_file_path = f"{temp_dir}/{user_id}.csv"
    # (temp_file_path, "w", newline="") Ïó¨Í∏∞ÏÑú "w" = ÎçÆÏñ¥Ïì∞Í∏∞
    with open(temp_file_path, "w", newline="") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames)
        writer.writeheader()
        writer.writerows(submission_list)

    client.files_upload_v2(
        channel=dm_channel_id,
        file=temp_file_path,
        initial_comment=f"<@{user_id}> ÎãòÏùò Ï†úÏ∂úÎÇ¥Ïó≠ ÏûÖÎãàÎã§!",
    )

    # ÏûÑÏãúÎ°ú ÏÉùÏÑ±Ìïú CSV ÌååÏùºÏùÑ ÏÇ≠Ï†ú
    os.remove(temp_file_path)


@app.command("/Í¥ÄÎ¶¨Ïûê")
def handle_some_command(ack, body, client: WebClient):
    ack()

    # Í¥ÄÎ¶¨ÏûêÏù∏ÏßÄ ÌôïÏù∏ ÌõÑ  ÏïÑÎãàÎùºÎ©¥ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÌõÑ Ï¢ÖÎ£å
    user_id = body["user_id"]
    channel_id = body["channel_id"]
    if user_id != "U08TDQNJE10":
        # chat_postEphemeral() Ïù¥ Í≤ΩÏö∞ Ïª§Îß®Ìä∏ Î™ÖÎ†πÏùÑ ÏöîÏ≤≠Ìïú Î©§Î≤ÑÏóêÍ≤åÎßå Î©îÏãúÏßÄÍ∞Ä Î≥¥Ïù¥Í≤å ÎãµÏû•Ïù¥ Í∞ÑÎã§. (Ïä¨ÎûôÏóêÏÑúÎäî 'ÎÇòÏóêÍ≤åÎßå ÌëúÏãú' Î¨∏Íµ¨ Ï∂úÎ†•)
        client.chat_postEphemeral(
            channel=body["channel_id"],
            user=user_id,
            text="Í¥ÄÎ¶¨ÏûêÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§.",
        )
        return None

    # Í¥ÄÎ¶¨ÏûêÏö© Î≤ÑÌäº Ï†ÑÏÜ°(Ï†ÑÏ≤¥ Ï†úÏ∂úÎÇ¥Ïó≠ÏùÑ Î∞òÌôò)
    client.chat_postEphemeral(
        channel=channel_id,
        user=user_id,
        text="Í¥ÄÎ¶¨Ïûê Î©îÎâ¥Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.",
        blocks=[
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "Ï†ÑÏ≤¥ Ï†úÏ∂úÎÇ¥Ïó≠ Ï°∞Ìöå",
                            "emoji": True,
                        },
                        "value": "admin_value_1",
                        "action_id": "fetch_all_submission",
                    }
                ],
            }
        ],
    )


@app.action("fetch_all_submission")
def handle_some_action(ack, body, client: WebClient):
    ack()
    # Í¥ÄÎ¶¨ÏûêÏùò DM Ï±ÑÎÑê ID Í∞ÄÏ†∏Ïò§Í∏∞
    user_id = body["user"]["id"]
    response = client.conversations_open(users=user_id)
    dm_channel_id = response["channel"]["id"]

    # Ï†ÑÏ≤¥ Ï†úÏ∂úÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨ÏôÄÏÑú Ï†ÑÏÜ°
    file_path = "data/db.csv"

    if not os.path.exists(file_path):
        client.chat_postMessage(channel=dm_channel_id, text="Ï†úÏ∂úÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.")
        return None

    client.files_upload_v2(
        channel=dm_channel_id, file=file_path, initial_comment="Ï†ÑÏ≤¥ Ï†úÏ∂úÎÇ¥Ïó≠ ÏûÖÎãàÎã§!"
    )


if __name__ == "__main__":
    # export SLACK_APP_TOKEN=xapp-***
    # export SLACK_BOT_TOKEN=xoxb-***
    handler = SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"])
    handler.start()
